<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Arif Qodari | Tech Notes</title>
<link>https://arifqodari.github.io/index.html</link>
<atom:link href="https://arifqodari.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Data Science and Artificial Intelligence</description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Mon, 12 Dec 2022 17:00:00 GMT</lastBuildDate>
<item>
  <title>Pandas Number Formatting</title>
  <dc:creator>Arif Qodari</dc:creator>
  <link>https://arifqodari.github.io/posts/2022-12-13-pandas-number-formatting.html</link>
  <description><![CDATA[ 




<p>In many cases we need to apply different number formatting to different columns. One column might need to use currency format, while the other need to use percent format.</p>
<p>In this case, Pandas has <code>Styler.format</code> feature to do this (<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.io.formats.style.Styler.format.html">ref</a>). We just need to define the formatting function for columns we want to apply on using dictionary where each key represents column name and the value represents formatting function.</p>
<p>Here is the example.</p>
<p>Let’s use this sample data.</p>
<div class="cell" data-execution_count="3">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://gist.githubusercontent.com/arifqodari/08692800e902401860c7ab4f94c2390c/raw/8e6e4e5c85ab091d6ac21801c2fe02fa6dd1fc77/sales_dummy.csv"</span>)</span>
<span id="cb1-2">df</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th">total_sales</th>
<th data-quarto-table-cell-role="th">revenue</th>
<th data-quarto-table-cell-role="th">rate</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2023-01-01</td>
<td>923</td>
<td>10400500</td>
<td>0.046723</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2023-01-02</td>
<td>1104</td>
<td>11299050</td>
<td>0.050123</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2023-01-03</td>
<td>987</td>
<td>10904500</td>
<td>0.040111</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Next, we can define and apply the formatting function.</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">format_mapping <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb2-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"revenue"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{:,} IDR"</span>,</span>
<span id="cb2-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rate"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{:,.2%}"</span></span>
<span id="cb2-4">}</span>
<span id="cb2-5"></span>
<span id="cb2-6">df.style.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(format_mapping)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<style type="text/css">
</style>

<table id="T_6c95a" data-quarto-postprocess="true" class="table table-sm table-striped small">
<thead>
<tr class="header">
<th class="blank level0" data-quarto-table-cell-role="th">&nbsp;</th>
<th id="T_6c95a_level0_col0" class="col_heading level0 col0" data-quarto-table-cell-role="th">date</th>
<th id="T_6c95a_level0_col1" class="col_heading level0 col1" data-quarto-table-cell-role="th">total_sales</th>
<th id="T_6c95a_level0_col2" class="col_heading level0 col2" data-quarto-table-cell-role="th">revenue</th>
<th id="T_6c95a_level0_col3" class="col_heading level0 col3" data-quarto-table-cell-role="th">rate</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td id="T_6c95a_level0_row0" class="row_heading level0 row0" data-quarto-table-cell-role="th">0</td>
<td id="T_6c95a_row0_col0" class="data row0 col0">2023-01-01</td>
<td id="T_6c95a_row0_col1" class="data row0 col1">923</td>
<td id="T_6c95a_row0_col2" class="data row0 col2">10,400,500 IDR</td>
<td id="T_6c95a_row0_col3" class="data row0 col3">4.67%</td>
</tr>
<tr class="even">
<td id="T_6c95a_level0_row1" class="row_heading level0 row1" data-quarto-table-cell-role="th">1</td>
<td id="T_6c95a_row1_col0" class="data row1 col0">2023-01-02</td>
<td id="T_6c95a_row1_col1" class="data row1 col1">1104</td>
<td id="T_6c95a_row1_col2" class="data row1 col2">11,299,050 IDR</td>
<td id="T_6c95a_row1_col3" class="data row1 col3">5.01%</td>
</tr>
<tr class="odd">
<td id="T_6c95a_level0_row2" class="row_heading level0 row2" data-quarto-table-cell-role="th">2</td>
<td id="T_6c95a_row2_col0" class="data row2 col0">2023-01-03</td>
<td id="T_6c95a_row2_col1" class="data row2 col1">987</td>
<td id="T_6c95a_row2_col2" class="data row2 col2">10,904,500 IDR</td>
<td id="T_6c95a_row2_col3" class="data row2 col3">4.01%</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Neat!</p>
<p>The script above only apply formatting to certain columns defined in the <code>format_mapping</code> dictionary. Here is the explanation:</p>
<ul>
<li><p>revenue column needs thousand separator using comma (,)</p></li>
<li><p>rate column need to be presented as percentage.</p>
<p>Note that the original value is not in the percentage yet.</p></li>
</ul>



 ]]></description>
  <category>pandas</category>
  <category>TIL</category>
  <guid>https://arifqodari.github.io/posts/2022-12-13-pandas-number-formatting.html</guid>
  <pubDate>Mon, 12 Dec 2022 17:00:00 GMT</pubDate>
</item>
<item>
  <title>Tidying Dataframe Column Names</title>
  <dc:creator>Arif Qodari</dc:creator>
  <link>https://arifqodari.github.io/posts/2022-08-01-tidying-dataframe-column-names.html</link>
  <description><![CDATA[ 




<p>Let’s use this sample data.</p>
<div class="cell" data-execution_count="3">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://gist.githubusercontent.com/arifqodari/965b854469b279df026e305864a944c0/raw/43984c8596373d64e602717ed6c3313393c85b2e/flight_dummy.csv"</span>)</span>
<span id="cb1-2">df</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="3">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">flightNumber</th>
<th data-quarto-table-cell-role="th">Airline Name</th>
<th data-quarto-table-cell-role="th">departure date_time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>QZ-274</td>
<td>AirAsia Indonesia</td>
<td>2023-11-22 20:30</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>QG-526</td>
<td>Citilink</td>
<td>2023-11-22 16:20</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>QG-522</td>
<td>Citilink</td>
<td>2023-11-22 06:00</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Next, let’s define our method <code>tidy_columns</code> containing series of functions to tidy up the column names. Then apply the function to the dataframe above.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> camel_to_snake(str_):</span>
<span id="cb2-2">    str_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.sub(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(.)([A-Z][a-z]+)"</span>, <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"\1 \2"</span>, str_)</span>
<span id="cb2-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> re.sub(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"([a-z0-9])([A-Z])"</span>, <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"\1 \2"</span>, str_).lower()</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> whitespace_to_underscore(str_):</span>
<span id="cb2-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> re.sub(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"\s+"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>, str_)</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> tidy_columns(df):</span>
<span id="cb2-9">    df.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb2-10">        df.columns</span>
<span id="cb2-11">        .<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.strip()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># strip text</span></span>
<span id="cb2-12">        .<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(camel_to_snake)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># change to snake case</span></span>
<span id="cb2-13">        .<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(whitespace_to_underscore)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># change any whitespace to underscore</span></span>
<span id="cb2-14">        .<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.lower()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># lowercase</span></span>
<span id="cb2-15">        .<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"("</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb2-16">        .<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">")"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb2-17">    )</span>
<span id="cb2-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> df</span>
<span id="cb2-19"></span>
<span id="cb2-20"></span>
<span id="cb2-21">tidy_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tidy_columns(df)</span>
<span id="cb2-22">tidy_df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">flight_number</th>
<th data-quarto-table-cell-role="th">airline_name</th>
<th data-quarto-table-cell-role="th">departure_date_time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>QZ-274</td>
<td>AirAsia Indonesia</td>
<td>2023-11-22 20:30</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>QG-526</td>
<td>Citilink</td>
<td>2023-11-22 16:20</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>QG-522</td>
<td>Citilink</td>
<td>2023-11-22 06:00</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Neat! The simple method above <code>tidy_columns</code> do the following:</p>
<ul>
<li>strip trailing whitespace</li>
<li>change from camel case to snake case (if any)</li>
<li>replace any whitespace (e.g.&nbsp;space) to underscore</li>
<li>change case to lowercase</li>
<li>remove parentheses</li>
</ul>
<p><strong>If you think that it needs additional treatment, you can simply create another function that accept a string and return a string and put another <code>.map(your_function)</code> in the tidy function above.</strong></p>



 ]]></description>
  <category>pandas</category>
  <category>TIL</category>
  <guid>https://arifqodari.github.io/posts/2022-08-01-tidying-dataframe-column-names.html</guid>
  <pubDate>Sun, 31 Jul 2022 17:00:00 GMT</pubDate>
</item>
<item>
  <title>Calculating a Forward-Looking Moving Average in Pandas</title>
  <dc:creator>Arif Qodari</dc:creator>
  <link>https://arifqodari.github.io/posts/2022-01-30-calculating-a-forward-looking-moving-average-in-pandas.html</link>
  <description><![CDATA[ 




<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span></code></pre></div>
</details>
</div>
<section id="question" class="level2">
<h2 class="anchored" data-anchor-id="question">Question</h2>
<p>Given a data with a column named <code>n</code> that contains a list of integer numbers. Calculate a moving average with a window size = 3!</p>
<div class="cell" data-execution_count="10">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">87</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">77</span>]})</span>
<span id="cb2-2">df</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="10">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">n</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>20</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>44</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>46</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>23</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>10</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>80</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>52</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>64</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>87</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>77</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="solution" class="level2">
<h2 class="anchored" data-anchor-id="solution">Solution</h2>
<p>There is a function <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.rolling.html">pandas.DataFrame.rolling</a> that we can use to do moving window calculation. In this particular case, we will calculate mean in each window.</p>
<div class="cell" data-execution_count="11">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">(</span>
<span id="cb3-2">    df</span>
<span id="cb3-3">    .assign(</span>
<span id="cb3-4">        moving_average<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> dfx: dfx.n.rolling(window<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>).mean()</span>
<span id="cb3-5">    )</span>
<span id="cb3-6">)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="11">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">n</th>
<th data-quarto-table-cell-role="th">moving_average</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>20</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>44</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>46</td>
<td>36.666667</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>23</td>
<td>37.666667</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>10</td>
<td>26.333333</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>80</td>
<td>37.666667</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>52</td>
<td>47.333333</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>64</td>
<td>65.333333</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>87</td>
<td>67.666667</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>77</td>
<td>76.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>OK. So far so good. In the above code, we calculate a moving average using window size = 3 and then assign the result in a new column named <code>moving_average</code>.</p>
<p>The first two rows are NaN because the <code>rolling</code> function look the values backward. For example when using window size = 3, each window calculate values from position current row - 2 until current row. Hence, the NaN values are there because we can’t calculate mean from less than 3 (window size).</p>
<p>What if what we want is to calculate a forward-looking moving average? That means a window must contain values from position current row until the next 2 rows ahead before calculating the mean. To do that we need a special window indexer called <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.api.indexers.FixedForwardWindowIndexer.html">pandas.api.indexers.FixedForwardWindowIndexer</a>.</p>
<p>Here is what we can do.</p>
<div class="cell" data-execution_count="12">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">window <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.api.indexers.FixedForwardWindowIndexer(window_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb4-2">(</span>
<span id="cb4-3">    df</span>
<span id="cb4-4">    .assign(</span>
<span id="cb4-5">        moving_average<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> dfx: dfx.n.rolling(window<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>window).mean()</span>
<span id="cb4-6">    )</span>
<span id="cb4-7">)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="12">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">n</th>
<th data-quarto-table-cell-role="th">moving_average</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>20</td>
<td>36.666667</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>44</td>
<td>37.666667</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>46</td>
<td>26.333333</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>23</td>
<td>37.666667</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>10</td>
<td>47.333333</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>80</td>
<td>65.333333</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>52</td>
<td>67.666667</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>64</td>
<td>76.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>87</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>77</td>
<td>NaN</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>The code is similar with the previous one, but now we specify a window parameter in <code>rolling</code> function using a special window indexer function.</p>
<p>Then, Voila! The result is as expected.</p>


</section>

 ]]></description>
  <category>pandas</category>
  <guid>https://arifqodari.github.io/posts/2022-01-30-calculating-a-forward-looking-moving-average-in-pandas.html</guid>
  <pubDate>Sat, 29 Jan 2022 17:00:00 GMT</pubDate>
</item>
<item>
  <title>Recreate Visualization in Matplotlib</title>
  <dc:creator>Arif Qodari</dc:creator>
  <link>https://arifqodari.github.io/posts/2021-08-23-recreate-visualization-in-matplotlib.html</link>
  <description><![CDATA[ 




<p>Last week I watched an <a href="https://www.youtube.com/watch?v=RNdDyknuxaA">interesting video</a> about recreating a D3.js chart using R ggplot. This is the <a href="https://bl.ocks.org/susielu/625aa4814098671290a8c6bb88a6301e">original chart</a> made using D3.js and this is the <a href="https://github.com/aswansyahputra/reviz/blob/main/outfile/01-emmys.png">recreated chart</a> using ggplot.</p>
<p>In this post, I’ll go through step by step to recreate the same chart, but using Matplotlib.</p>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<p>Preparing libraries and utility functions.</p>
<div class="cell" data-execution_count="22">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb1-5"></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pprint <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pprint</span>
<span id="cb1-8"></span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.style.use("seaborn_v0_8")</span></span>
<span id="cb1-11">plt.style.use(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seaborn-v0_8-whitegrid"</span>)</span>
<span id="cb1-12">pd.options.display.max_rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="23">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#########################</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># some utility functions</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#########################</span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Head(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">object</span>):</span>
<span id="cb2-6">    </span>
<span id="cb2-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, lines, fd<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sys.stdout):</span>
<span id="cb2-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lines</span>
<span id="cb2-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fd</span>
<span id="cb2-10">        </span>
<span id="cb2-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> write(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, msg):</span>
<span id="cb2-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb2-13">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb2-14">        </span>
<span id="cb2-15">        n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> msg.count(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lines:</span>
<span id="cb2-17">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> n</span>
<span id="cb2-18">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fd.write(msg)</span>
<span id="cb2-19">        </span>
<span id="cb2-20">        ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb2-22">            iy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> msg.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-23">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-24">            ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iy</span>
<span id="cb2-25">            </span>
<span id="cb2-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fd.write(msg[:ix])</span>
<span id="cb2-27">    </span>
<span id="cb2-28">    </span>
<span id="cb2-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pprint_head(to_print, length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb2-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Print first few lines of the text</span></span>
<span id="cb2-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-33">    pprint(to_print, stream<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Head(length))</span>
<span id="cb2-34">    </span>
<span id="cb2-35">    </span>
<span id="cb2-36"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> glimpse(df, rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, info<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb2-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Display the first few rows (n) of the given dataframe</span></span>
<span id="cb2-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    If info=True, then display the result of dataframe.info() instead</span></span>
<span id="cb2-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> info:</span>
<span id="cb2-42">        display(df.info())</span>
<span id="cb2-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb2-44">        display(df.head(rows))</span>
<span id="cb2-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> df</span></code></pre></div>
</details>
</div>
</section>
<section id="dataset" class="level2">
<h2 class="anchored" data-anchor-id="dataset">Dataset</h2>
<section id="download-the-raw-data" class="level3">
<h3 class="anchored" data-anchor-id="download-the-raw-data">Download the Raw Data</h3>
<p>The raw data is in json format and can be downloaded from <a href="https://gist.githubusercontent.com/susielu/625aa4814098671290a8c6bb88a6301e/raw/871576bf6cd336aee813ba97078b97fc91da3062/yearNetwork.json">here</a>.</p>
<div class="cell" data-execution_count="24">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">data_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://gist.githubusercontent.com/susielu/625aa4814098671290a8c6bb88a6301e/raw/871576bf6cd336aee813ba97078b97fc91da3062/yearNetwork.json"</span></span>
<span id="cb3-2">data_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(data_url).json()</span>
<span id="cb3-3">pprint_head(data_json, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># only print first 10 lines</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>{'networkLines': [{'line': [{'value': 26, 'year': '2013'},
                            {'value': 26, 'year': '2014'},
                            {'value': 24, 'year': '2015'},
                            {'value': 24, 'year': '2016'},
                            {'value': 13, 'year': '2017'}],
                   'max': 26,
                   'network': 'AMC',
                   'total': 113},
                  {'line': [{'value': 32, 'year': '2013'},
                            {'value': 24, 'year': '2014'},</code></pre>
</div>
</div>
</section>
<section id="convert-json-into-dataframe" class="level3">
<h3 class="anchored" data-anchor-id="convert-json-into-dataframe">Convert json into DataFrame</h3>
<p>Once we get the json data, we will convert the data into a dataframe. To do that, we use <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html?highlight=json_normalize#normalization"><code>json_normalize</code></a> function in <code>pandas</code> that will normalize a json (or dict) into a flat dataframe. At the end of the pipeline, we specify data type for each column to make sure that they have the correct data type.</p>
<p><strong>Tips</strong></p>
<p>Use <code>.pipe(glimpse, info=True)</code> to see data types for each column without leaving the current pipeline</p>
<div class="cell" data-execution_count="25">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert json into tabular</span></span>
<span id="cb5-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ref: https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html?highlight=json_normalize#normalization</span></span>
<span id="cb5-4">    pd.json_normalize(data_json[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"networkLines"</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"line"</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"network"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"total"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max"</span>])</span>
<span id="cb5-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .pipe(glimpse, info=True)</span></span>
<span id="cb5-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># specify data type for numeric variables</span></span>
<span id="cb5-7">    .astype({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"year"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"int"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"int"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"total"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"int"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"int"</span>})</span>
<span id="cb5-8">)</span>
<span id="cb5-9">df</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="25">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">year</th>
<th data-quarto-table-cell-role="th">value</th>
<th data-quarto-table-cell-role="th">network</th>
<th data-quarto-table-cell-role="th">total</th>
<th data-quarto-table-cell-role="th">max</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2013</td>
<td>26</td>
<td>AMC</td>
<td>113</td>
<td>26</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2014</td>
<td>26</td>
<td>AMC</td>
<td>113</td>
<td>26</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2015</td>
<td>24</td>
<td>AMC</td>
<td>113</td>
<td>26</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>2016</td>
<td>24</td>
<td>AMC</td>
<td>113</td>
<td>26</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2017</td>
<td>13</td>
<td>AMC</td>
<td>113</td>
<td>26</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">54</td>
<td>2015</td>
<td>12</td>
<td>Amazon</td>
<td>44</td>
<td>16</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">55</td>
<td>2016</td>
<td>16</td>
<td>Amazon</td>
<td>44</td>
<td>16</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">56</td>
<td>2017</td>
<td>16</td>
<td>Amazon</td>
<td>44</td>
<td>16</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">57</td>
<td>2016</td>
<td>2</td>
<td>Hulu</td>
<td>20</td>
<td>18</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">58</td>
<td>2017</td>
<td>18</td>
<td>Hulu</td>
<td>20</td>
<td>18</td>
</tr>
</tbody>
</table>

<p>59 rows × 5 columns</p>
</div>
</div>
</div>
</section>
<section id="pivot-the-data-into-wide-format" class="level3">
<h3 class="anchored" data-anchor-id="pivot-the-data-into-wide-format">Pivot the Data into Wide Format</h3>
<p>As we can see above, the dataframe is in long format. That means, each row represents one observation and each column only represent 1 variable or metric.</p>
<p>For the next following steps, i.e.&nbsp;visualization, we need to pivot the dataframe into a wide format. After pivoted, each row in the dataframe represents a single year and each column represents values for one network.</p>
<div class="cell" data-execution_count="26">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">yearly_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb6-2">    df</span>
<span id="cb6-3">    .copy()</span>
<span id="cb6-4">    .pivot(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"year"</span>, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"network"</span>, values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>)</span>
<span id="cb6-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove column index name</span></span>
<span id="cb6-6">    .rename_axis(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-7">)</span>
<span id="cb6-8">yearly_df</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="26">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">ABC</th>
<th data-quarto-table-cell-role="th">AMC</th>
<th data-quarto-table-cell-role="th">Amazon</th>
<th data-quarto-table-cell-role="th">CBS</th>
<th data-quarto-table-cell-role="th">FOX</th>
<th data-quarto-table-cell-role="th">FX Networks</th>
<th data-quarto-table-cell-role="th">HBO</th>
<th data-quarto-table-cell-role="th">Hulu</th>
<th data-quarto-table-cell-role="th">NBC</th>
<th data-quarto-table-cell-role="th">Nat Geo</th>
<th data-quarto-table-cell-role="th">Netflix</th>
<th data-quarto-table-cell-role="th">PBS</th>
<th data-quarto-table-cell-role="th">Showtime</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">year</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">2013</td>
<td>45.0</td>
<td>26.0</td>
<td>NaN</td>
<td>54.0</td>
<td>20.0</td>
<td>26.0</td>
<td>109.0</td>
<td>NaN</td>
<td>53.0</td>
<td>NaN</td>
<td>14.0</td>
<td>25.0</td>
<td>32.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2014</td>
<td>37.0</td>
<td>26.0</td>
<td>NaN</td>
<td>47.0</td>
<td>21.0</td>
<td>45.0</td>
<td>99.0</td>
<td>NaN</td>
<td>47.0</td>
<td>4.0</td>
<td>31.0</td>
<td>34.0</td>
<td>24.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2015</td>
<td>42.0</td>
<td>24.0</td>
<td>12.0</td>
<td>41.0</td>
<td>36.0</td>
<td>39.0</td>
<td>126.0</td>
<td>NaN</td>
<td>43.0</td>
<td>4.0</td>
<td>34.0</td>
<td>30.0</td>
<td>18.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2016</td>
<td>35.0</td>
<td>24.0</td>
<td>16.0</td>
<td>35.0</td>
<td>30.0</td>
<td>57.0</td>
<td>94.0</td>
<td>2.0</td>
<td>41.0</td>
<td>10.0</td>
<td>54.0</td>
<td>26.0</td>
<td>22.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2017</td>
<td>33.0</td>
<td>13.0</td>
<td>16.0</td>
<td>29.0</td>
<td>20.0</td>
<td>55.0</td>
<td>111.0</td>
<td>18.0</td>
<td>64.0</td>
<td>15.0</td>
<td>91.0</td>
<td>11.0</td>
<td>15.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Those <code>NaN</code> values in the dataframe above mean missing values.</p>
</section>
</section>
<section id="visualization" class="level2">
<h2 class="anchored" data-anchor-id="visualization">Visualization</h2>
<section id="basic-line-plot" class="level3">
<h3 class="anchored" data-anchor-id="basic-line-plot">Basic Line Plot</h3>
<p>First thing first, we will plot the basic line plot with year as the x-axis and network value as the y-axis. There will be multiple lines and each line represent one network.</p>
<p>It is also useful to get the color map from the <a href="https://bl.ocks.org/susielu/625aa4814098671290a8c6bb88a6301e">orginal chart</a>, so that our chart will have similar color pallette.</p>
<div class="cell" data-execution_count="27">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="cb7-2">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot()</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># colormap from the original chart</span></span>
<span id="cb7-5">colormap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb7-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HBO"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>,</span>
<span id="cb7-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Netflix"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#D32F2F"</span>,</span>
<span id="cb7-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NBC"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffc107"</span>,</span>
<span id="cb7-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FX Networks"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0097a7"</span>,</span>
<span id="cb7-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ABC"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#00BFA5"</span>,</span>
<span id="cb7-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CBS"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#00BCD4"</span>,</span>
<span id="cb7-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FOX"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#3f51b5"</span>,</span>
<span id="cb7-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Showtime"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#C5CAE9"</span>,</span>
<span id="cb7-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AMC"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#D32F2F"</span>,</span>
<span id="cb7-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PBS"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#B39DDB"</span>,</span>
<span id="cb7-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Amazon"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffc107"</span>,</span>
<span id="cb7-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nat Geo"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff9800"</span>,</span>
<span id="cb7-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hulu"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#00BFA5"</span></span>
<span id="cb7-19">}</span>
<span id="cb7-20"></span>
<span id="cb7-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate over unique networks</span></span>
<span id="cb7-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> df.network.unique():</span>
<span id="cb7-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HBO"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Netflix"</span>):</span>
<span id="cb7-24">        ax.plot(yearly_df.index, yearly_df[n], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colormap[n], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n)</span>
<span id="cb7-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb7-26">        ax.plot(yearly_df.index, yearly_df[n], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colormap[n], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="fig-line" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://arifqodari.github.io/posts/2021-08-23-recreate-visualization-in-matplotlib_files/figure-html/fig-line-output-1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Figure&nbsp;1: Basic Line Plot</figcaption>
</figure>
</div>
</div>
</div>
<p>Note that we use two different line styles for the lines. - Solid line for HBO and Netflix, and - Dashed line for the other networks</p>
<p>Next, we will add the bullet points (scatter plot) on top of the lines</p>
</section>
<section id="scatter-plot" class="level3">
<h3 class="anchored" data-anchor-id="scatter-plot">Scatter Plot</h3>
<p>We will only apply scatter plot only to Netflix and HBO networks</p>
<div class="cell" data-execution_count="28">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># scatter point</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># only Netflix and HBO that have points</span></span>
<span id="cb8-3">ax.scatter(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>yearly_df.index, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>yearly_df.Netflix, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>, zorder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colormap[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Netflix"</span>])</span>
<span id="cb8-4">ax.scatter(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>yearly_df.index, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>yearly_df.HBO, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>, zorder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colormap[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HBO"</span>])</span>
<span id="cb8-5"></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># scatter label</span></span>
<span id="cb8-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> yearly_df.itertuples():</span>
<span id="cb8-8">    ax.text(row.Index, row.Netflix, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(row.Netflix),</span>
<span id="cb8-9">            ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>,</span>
<span id="cb8-10">            color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fff"</span>,</span>
<span id="cb8-11">            fontweight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"medium"</span>)</span>
<span id="cb8-12">    ax.text(row.Index, row.HBO, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(row.HBO),</span>
<span id="cb8-13">            ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>,</span>
<span id="cb8-14">            color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fff"</span>,</span>
<span id="cb8-15">            fontweight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"medium"</span>)</span>
<span id="cb8-16">    </span>
<span id="cb8-17">fig</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="28">
<div id="fig-scatter" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://arifqodari.github.io/posts/2021-08-23-recreate-visualization-in-matplotlib_files/figure-html/fig-scatter-output-1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Figure&nbsp;2: Scatter Plot</figcaption>
</figure>
</div>
</div>
</div>
<p>It is important to make sure the labels are vertically (va) and horizontally (ha) centered.</p>
</section>
<section id="legend" class="level3">
<h3 class="anchored" data-anchor-id="legend">Legend</h3>
<p>Next we are going to add legend text in the right-hand side of the chart. To make sure that we have enough space to display the texts, we will set the x-axis value range from 2011 to 2018 (+1 year as an extra whitespace to be filled in by the text)</p>
<div class="cell" data-execution_count="29">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># legend</span></span>
<span id="cb9-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> df.network.unique():</span>
<span id="cb9-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HBO"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Netflix"</span>):</span>
<span id="cb9-4">        ax.text(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2017.15</span>, yearly_df.loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2017</span>, n], n.upper(),</span>
<span id="cb9-5">                ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>,</span>
<span id="cb9-6">                color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colormap[n],</span>
<span id="cb9-7">                fontweight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"medium"</span>)</span>
<span id="cb9-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb9-9">        ax.text(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2017.05</span>, yearly_df.loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2017</span>, n], n.upper(),</span>
<span id="cb9-10">                ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>,</span>
<span id="cb9-11">                color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colormap[n],</span>
<span id="cb9-12">                fontweight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"medium"</span>)</span>
<span id="cb9-13">        </span>
<span id="cb9-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set x axis range</span></span>
<span id="cb9-15">ax.set_xlim([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2011</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2018</span>])</span>
<span id="cb9-16">fig</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="29">
<div id="fig-legend" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://arifqodari.github.io/posts/2021-08-23-recreate-visualization-in-matplotlib_files/figure-html/fig-legend-output-1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Figure&nbsp;3: Add Legend</figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="grid-and-axis" class="level3">
<h3 class="anchored" data-anchor-id="grid-and-axis">Grid and Axis</h3>
<p>Unlike any other standard charts, the chart has vertical grid lines and the x-axis ticks are written in the middle of the lines. We are going to draw those grid lines and axis texts using <code>vlines</code> and <code>text</code>.</p>
<div class="cell" data-execution_count="30">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># horizontal bottom line</span></span>
<span id="cb10-2">ax.hlines(xmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>yearly_df.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), xmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>yearly_df.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(), y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lightgray"</span>, zorder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># vertical lines</span></span>
<span id="cb10-5">ax.vlines(yearly_df.index, ymin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, ymax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>yearly_df.HBO, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lightgray"</span>, zorder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x-axis ticks</span></span>
<span id="cb10-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> yearly_df.itertuples():</span>
<span id="cb10-9">    ax.text(row.Index, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, row.Index,</span>
<span id="cb10-10">            ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>,</span>
<span id="cb10-11">            backgroundcolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fff"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>,</span>
<span id="cb10-12">            fontweight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>,</span>
<span id="cb10-13">            bbox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pad"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fc"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fff"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ec"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fff"</span>})</span>
<span id="cb10-14"></span>
<span id="cb10-15">fig</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="30">
<div id="fig-grid" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://arifqodari.github.io/posts/2021-08-23-recreate-visualization-in-matplotlib_files/figure-html/fig-grid-output-1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Figure&nbsp;4: Grid and Axis</figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="title" class="level3">
<h3 class="anchored" data-anchor-id="title">Title</h3>
<p>It is quite tricky to write the title since it has rich formatting (i.e.&nbsp;color, bold, and highlight).</p>
<div class="cell" data-execution_count="31">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># title</span></span>
<span id="cb11-2">ax.text(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2011</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Netflix"</span>,</span>
<span id="cb11-3">        ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>,</span>
<span id="cb11-4">        color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colormap[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Netflix"</span>],</span>
<span id="cb11-5">        fontweight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb11-6"></span>
<span id="cb11-7">ax.text(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2011</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Challenges"</span>,</span>
<span id="cb11-8">        ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>,</span>
<span id="cb11-9">        fontweight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"light"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb11-10"></span>
<span id="cb11-11">ax.text(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2011</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HBO at the"</span>,</span>
<span id="cb11-12">        ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>,</span>
<span id="cb11-13">        fontweight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"light"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb11-14"></span>
<span id="cb11-15">ax.text(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2011</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2017 Emmys"</span>,</span>
<span id="cb11-16">        ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>,</span>
<span id="cb11-17">        fontweight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"light"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb11-18"></span>
<span id="cb11-19">fig</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="31">
<div id="fig-title" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://arifqodari.github.io/posts/2021-08-23-recreate-visualization-in-matplotlib_files/figure-html/fig-title-output-1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Figure&nbsp;5: Title</figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="final-version" class="level3">
<h3 class="anchored" data-anchor-id="final-version">Final Version</h3>
<p>In the final version, we combine all the parts above into a single block code.</p>
<div class="cell" data-execution_count="32">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># colormap from the original chart</span></span>
<span id="cb12-2">colormap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb12-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HBO"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>,</span>
<span id="cb12-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Netflix"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#D32F2F"</span>,</span>
<span id="cb12-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NBC"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffc107"</span>,</span>
<span id="cb12-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FX Networks"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#0097a7"</span>,</span>
<span id="cb12-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ABC"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#00BFA5"</span>,</span>
<span id="cb12-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CBS"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#00BCD4"</span>,</span>
<span id="cb12-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FOX"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#3f51b5"</span>,</span>
<span id="cb12-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Showtime"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#C5CAE9"</span>,</span>
<span id="cb12-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AMC"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#D32F2F"</span>,</span>
<span id="cb12-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PBS"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#B39DDB"</span>,</span>
<span id="cb12-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Amazon"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ffc107"</span>,</span>
<span id="cb12-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nat Geo"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#ff9800"</span>,</span>
<span id="cb12-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hulu"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#00BFA5"</span></span>
<span id="cb12-16">}</span>
<span id="cb12-17"></span>
<span id="cb12-18">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="cb12-19">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot()</span>
<span id="cb12-20"></span>
<span id="cb12-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># horizontal bottom line</span></span>
<span id="cb12-22">ax.hlines(xmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>yearly_df.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), xmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>yearly_df.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(), y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lightgray"</span>, zorder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-23"></span>
<span id="cb12-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># vertical lines</span></span>
<span id="cb12-25">ax.vlines(yearly_df.index, ymin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, ymax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>yearly_df.HBO, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lightgray"</span>, zorder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-26"></span>
<span id="cb12-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x-axis ticks</span></span>
<span id="cb12-28"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> yearly_df.itertuples():</span>
<span id="cb12-29">    ax.text(row.Index, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, row.Index,</span>
<span id="cb12-30">            ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>,</span>
<span id="cb12-31">            backgroundcolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fff"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>,</span>
<span id="cb12-32">            fontweight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>,</span>
<span id="cb12-33">            bbox<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pad"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fc"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fff"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ec"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fff"</span>})</span>
<span id="cb12-34"></span>
<span id="cb12-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># line plot</span></span>
<span id="cb12-36"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> df.network.unique():</span>
<span id="cb12-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HBO"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Netflix"</span>):</span>
<span id="cb12-38">        ax.plot(yearly_df.index, yearly_df[n], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colormap[n], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n)</span>
<span id="cb12-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb12-40">        ax.plot(yearly_df.index, yearly_df[n], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colormap[n], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":"</span>)</span>
<span id="cb12-41"></span>
<span id="cb12-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># scatter point</span></span>
<span id="cb12-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># only Netflix and HBO that have points</span></span>
<span id="cb12-44">ax.scatter(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>yearly_df.index, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>yearly_df.Netflix, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>, zorder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colormap[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Netflix"</span>])</span>
<span id="cb12-45">ax.scatter(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>yearly_df.index, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>yearly_df.HBO, s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>, zorder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colormap[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HBO"</span>])</span>
<span id="cb12-46"></span>
<span id="cb12-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># scatter label</span></span>
<span id="cb12-48"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> yearly_df.itertuples():</span>
<span id="cb12-49">    ax.text(row.Index, row.Netflix, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(row.Netflix),</span>
<span id="cb12-50">            ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>,</span>
<span id="cb12-51">            color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fff"</span>,</span>
<span id="cb12-52">            fontweight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"medium"</span>)</span>
<span id="cb12-53">    ax.text(row.Index, row.HBO, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(row.HBO),</span>
<span id="cb12-54">            ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>,</span>
<span id="cb12-55">            color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fff"</span>,</span>
<span id="cb12-56">            fontweight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normal"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"medium"</span>)</span>
<span id="cb12-57"></span>
<span id="cb12-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># legend</span></span>
<span id="cb12-59"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> df.network.unique():</span>
<span id="cb12-60">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HBO"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Netflix"</span>):</span>
<span id="cb12-61">        ax.text(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2017.15</span>, yearly_df.loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2017</span>, n], n.upper(),</span>
<span id="cb12-62">                ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>,</span>
<span id="cb12-63">                color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colormap[n],</span>
<span id="cb12-64">                fontweight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"medium"</span>)</span>
<span id="cb12-65">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb12-66">        ax.text(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2017.05</span>, yearly_df.loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2017</span>, n], n.upper(),</span>
<span id="cb12-67">                ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>,</span>
<span id="cb12-68">                color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colormap[n],</span>
<span id="cb12-69">                fontweight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"medium"</span>)</span>
<span id="cb12-70">        </span>
<span id="cb12-71"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># title</span></span>
<span id="cb12-72">ax.text(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2011</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Netflix"</span>,</span>
<span id="cb12-73">        ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>,</span>
<span id="cb12-74">        color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colormap[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Netflix"</span>],</span>
<span id="cb12-75">        fontweight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb12-76"></span>
<span id="cb12-77">ax.text(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2011</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Challenges"</span>,</span>
<span id="cb12-78">        ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>,</span>
<span id="cb12-79">        fontweight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"light"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb12-80"></span>
<span id="cb12-81">ax.text(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2011</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HBO at the"</span>,</span>
<span id="cb12-82">        ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>,</span>
<span id="cb12-83">        fontweight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"light"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb12-84"></span>
<span id="cb12-85">ax.text(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2011</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2017 Emmys"</span>,</span>
<span id="cb12-86">        ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>,</span>
<span id="cb12-87">        fontweight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"light"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb12-88"></span>
<span id="cb12-89">ax.set_xlim([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2011</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2018</span>])</span>
<span id="cb12-90">ax.set_axis_off()</span>
<span id="cb12-91">plt.tight_layout()</span>
<span id="cb12-92">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="fig-final" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://arifqodari.github.io/posts/2021-08-23-recreate-visualization-in-matplotlib_files/figure-html/fig-final-output-1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Figure&nbsp;6: Final Version</figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="missing-parts" class="level3">
<h3 class="anchored" data-anchor-id="missing-parts">Missing Parts</h3>
<p>If you notice, the parts are reordered (e.g.&nbsp;grid lines are first) to make sure their layering stacks. Elements on the upper layers (displayed later) shouldn’t be occluded by any elements on the bottom layers.</p>
<p>The result above is already pretty much similar with the original visualization. However, we still have some missing / uncovered parts:</p>
<ol type="1">
<li><p>Font family</p>
<p>I use default font family. As consequences, the font look are not the same as in the original chart.</p></li>
<li><p>Rich title</p>
<p>I found that it is not straight forward to write a rich texh format for chart title</p></li>
<li><p>Avoid text overlap</p>
<p>As you might see on the legend texts (right-hand side) that the text are overlapped each other and unreadable. I haven’t found solution for this issue.</p></li>
</ol>


</section>
</section>

 ]]></description>
  <category>matplotlib</category>
  <guid>https://arifqodari.github.io/posts/2021-08-23-recreate-visualization-in-matplotlib.html</guid>
  <pubDate>Sun, 22 Aug 2021 17:00:00 GMT</pubDate>
</item>
</channel>
</rss>
